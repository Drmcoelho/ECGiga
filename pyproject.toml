[build-system]
requires = ["setuptools>=69", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ecgcourse"
version = "0.4.0"
description = "ECGCourse â€” Interactive ECG learning platform with AI-powered analysis"
authors = [
    {name="ECG Megaprojeto Team", email="ecgcourse@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Education",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
keywords = ["ecg", "cardiology", "medical", "education", "machine-learning"]

dependencies = [
    "typer>=0.12.0",
    "rich>=13.7.0",
    "pydantic>=2.7.0",
    "jsonschema>=4.23.0",
    "numpy>=1.26.0",
    "pandas>=2.2.0",
    "scipy>=1.11.0",
    "matplotlib>=3.8.0",
    "plotly>=5.22.0",
    "pillow>=10.2.0",
    "requests>=2.32.0",
    "pyyaml>=6.0.0",
    "toml>=0.10.0",
]

[project.optional-dependencies]
# OCR functionality
ocr = [
    "pytesseract>=0.3.10",
    "opencv-python-headless>=4.10.0",
    "rapidfuzz>=3.6.1",
]

# Computer vision extras
cv = [
    "opencv-python-headless>=4.10.0",
    "scikit-image>=0.21.0",
    "scikit-learn>=1.3.0",
]

# Web application
web = [
    "dash>=2.17.0",
    "flask>=3.0.0",
    "werkzeug>=3.0.0",
]

# Advanced signal processing
signal = [
    "neurokit2>=0.2.9",
    "wfdb>=4.1.2",
    "soundfile>=0.12.0",
]

# Asset management
assets = [
    "requests>=2.32.0",
    "beautifulsoup4>=4.12.2",
    "lxml>=4.9.3",
    "pillow-avif-plugin>=1.4.6",
]

# Development tools
dev = [
    "pytest>=8.3.0",
    "pytest-cov>=4.1.0",
    "black>=24.8.0",
    "ruff>=0.6.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

# All extras
all = [
    "ecgcourse[ocr,cv,web,signal,assets,dev]",
]

[project.urls]
Homepage = "https://github.com/Drmcoelho/ECGiga"
Repository = "https://github.com/Drmcoelho/ECGiga"
Issues = "https://github.com/Drmcoelho/ECGiga/issues"
Documentation = "https://github.com/Drmcoelho/ECGiga/blob/main/README.md"

[project.scripts]
ecgcourse = "cli_app.ecgcourse.__main__:main"
ecg-migrate = "scripts.python.migrate_reports:main"
ecg-benchmark = "scripts.python.benchmark_ecg:main"

[tool.black]
line-length = 100
target-version = ["py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | notebooks
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "PIE", # flake8-pie
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101", "D"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "neurokit2.*",
    "wfdb.*",
    "soundfile.*",
    "PIL.*",
    "dash.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
pythonpath = [".", "cli_app"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["cli_app", "scripts"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
